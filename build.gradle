group 'com.github.pscheidl'
version '0.3.1'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.1.RELEASE"
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
        classpath 'de.undercouch:gradle-download-task:3.2.0'
    }
}

apply plugin: "io.spring.dependency-management"
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: "de.undercouch.download"

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'


sourceCompatibility = 1.8

dependencyManagement {
    imports {
        mavenBom 'org.jboss.arquillian:arquillian-bom:1.1.13.Final'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    testCompile group: 'org.wildfly.arquillian', name: 'wildfly-arquillian-container-managed', version: '2.0.2.Final'
    testCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container', version: '1.1.13.Final'
    testCompileOnly group: 'javax', name: 'javaee-api', version: '7.0'

    compileOnly group: 'javax', name: 'javaee-api', version: '7.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

}


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('ossrhUsername'),
                        password: hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('ossrhPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('ossrhUsername'),
                        password: hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('ossrhPassword'))
            }

            pom.project {
                name 'FortEE'
                packaging 'jar'
                artifactId jar.project.name.toLowerCase()
                description 'Fault tolerance library focused on Java EE'
                url 'https://github.com/Pscheidl/FortEE'

                scm {
                    connection 'scm:git:git://github.com/Pscheidl/FortEE.git'
                    developerConnection 'scm:git:ssh://github.com/Pscheidl/FortEE.git'
                    url 'https://github.com/Pscheidl/FortEE'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id 'pscheidl'
                        name 'Pavel Pscheidl'
                        email 'pavelpscheidl@gmail.com'
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

test.doFirst {
    File wildflyzip = new File('containers', 'wildfly-10.1.0.Final.zip')
    File wildflyDirectory = new File('containers', 'wildfly-10.1.0.Final');

    if (!wildflyzip.exists()) {
        download {
            src 'http://download.jboss.org/wildfly/10.1.0.Final/wildfly-10.1.0.Final.zip'
            dest wildflyzip
        }

    }
    if (!wildflyDirectory.exists()) {
        copy {
            from zipTree(wildflyzip)
            into 'containers'
        }
    }
}